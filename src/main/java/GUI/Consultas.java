/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import Entidades.Persona;
import Persistencia.ConexionBD;
import Persistencia.IConexionBD;
import Persistencia.IPersonaDAO;
import Persistencia.ITramiteDAO;
import Persistencia.TramiteDAO;
import Utilidades.EncriptacionUtils;
import java.awt.Window;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 * Clase para hacer consultas de clientes
 *
 * @author IVAN
 */
public class Consultas extends javax.swing.JFrame {

    /**
     * Lista de personas
     */
    private List<Persona> personas;

    /**
     * Objeto de tipo personaDAO
     */
    IPersonaDAO personaDAO;

    /**
     * Constructor de la clase "Consultas" que recibe una implementación de la
     * interfaz IPersonaDAO como parámetro.
     *
     * @param personaDAO La implementación de la interfaz IPersonaDAO que se
     * utiliza para acceder a la capa de acceso a datos (DAO) de personas.
     */
    public Consultas(IPersonaDAO personaDAO) {
        this.personaDAO = personaDAO;
        initComponents();
        llenarTabla();
        acciontabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnCancelar = new javax.swing.JButton();
        btnAceptar = new javax.swing.JButton();
        btnVolver = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtRFC = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtFecha = new com.toedter.calendar.JDateChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtConsultas = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(0, 102, 204));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Consultas");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 30, 150, -1));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 710, 70));

        btnCancelar.setBackground(new java.awt.Color(204, 0, 0));
        btnCancelar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnCancelar.setForeground(new java.awt.Color(255, 255, 255));
        btnCancelar.setText("Cancelar");
        btnCancelar.setBorder(null);
        btnCancelar.setContentAreaFilled(false);
        btnCancelar.setOpaque(true);
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        jPanel1.add(btnCancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 160, 88, 37));

        btnAceptar.setBackground(new java.awt.Color(0, 102, 204));
        btnAceptar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnAceptar.setForeground(new java.awt.Color(255, 255, 255));
        btnAceptar.setText("Aceptar");
        btnAceptar.setBorder(null);
        btnAceptar.setContentAreaFilled(false);
        btnAceptar.setOpaque(true);
        btnAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarActionPerformed(evt);
            }
        });
        jPanel1.add(btnAceptar, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 220, 88, 37));

        btnVolver.setBackground(new java.awt.Color(0, 102, 204));
        btnVolver.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnVolver.setForeground(new java.awt.Color(255, 255, 255));
        btnVolver.setText("Volver");
        btnVolver.setBorder(null);
        btnVolver.setContentAreaFilled(false);
        btnVolver.setOpaque(true);
        btnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolverActionPerformed(evt);
            }
        });
        jPanel1.add(btnVolver, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 90, 88, 37));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 102, 204));
        jLabel4.setText("Nombre: ");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 100, -1, -1));

        txtNombre.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtNombre.setForeground(new java.awt.Color(0, 153, 204));
        txtNombre.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 102, 204), 2));
        txtNombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNombreKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNombreKeyTyped(evt);
            }
        });
        jPanel1.add(txtNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 100, 250, 28));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 102, 204));
        jLabel7.setText("RFC:");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 160, -1, -1));

        txtRFC.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtRFC.setForeground(new java.awt.Color(0, 153, 204));
        txtRFC.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 102, 204), 2));
        txtRFC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtRFCKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtRFCKeyTyped(evt);
            }
        });
        jPanel1.add(txtRFC, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 160, 250, 28));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 102, 204));
        jLabel8.setText("Fecha nacimiento:");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 230, 200, -1));

        txtFecha.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 51, 255)));
        jPanel1.add(txtFecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 220, 250, 30));

        jScrollPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 51, 204)));

        jtConsultas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Apellido Paterno", "Apellido Materno", "RFC", "Fecha Nacimiento"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jtConsultas);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 310, 650, 410));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 752, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
/**
     * Este método se ejecuta cuando se hace clic en el botón "Aceptar". Llama
     * al método "llenarTabla()" para actualizar la tabla de personas con los
     * filtros de búsqueda proporcionados en los campos de texto de nombre y
     * RFC.
     *
     * @param evt El evento de acción generado por hacer clic en el botón
     * "Aceptar".
     */
    private void btnAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarActionPerformed
        llenarTabla();
    }//GEN-LAST:event_btnAceptarActionPerformed
    /**
     * Este método se ejecuta cuando se hace clic en el botón "Volver". Crea una
     * nueva instancia de la clase "Inicial" y la muestra, cerrando la ventana
     * actual.
     *
     * @param evt El evento de acción generado por hacer clic en el botón
     * "Volver".
     */
    private void btnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverActionPerformed
        Inicial a = new Inicial();
        a.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnVolverActionPerformed
    /**
     * Este método se ejecuta cuando se suelta una tecla en el campo de texto de
     * nombre. Llama al método "llenarTabla()" para actualizar la tabla de
     * personas con el filtro de búsqueda proporcionado en el campo de texto de
     * nombre.
     *
     * @param evt El evento de teclado generado por soltar una tecla en el campo
     * de texto de nombre.
     */
    private void txtNombreKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombreKeyReleased
        llenarTabla();
    }//GEN-LAST:event_txtNombreKeyReleased
    /**
     * Este método se ejecuta cuando se suelta una tecla en el campo de texto de
     * RFC. Llama al método "llenarTabla()" para actualizar la tabla de personas
     * con el filtro de búsqueda proporcionado en el campo de texto de RFC.
     *
     * @param evt El evento de teclado generado por soltar una tecla en el campo
     * de texto de RFC.
     */
    private void txtRFCKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRFCKeyReleased
        llenarTabla();
    }//GEN-LAST:event_txtRFCKeyReleased
    /**
     * Este método se ejecuta cuando se presiona una tecla en el campo de texto
     * de nombre. Verifica si la tecla presionada es una letra o un espacio en
     * blanco, de lo contrario consume el evento para evitar la entrada de
     * caracteres inválidos.
     *
     * @param evt El evento de teclado generado por presionar una tecla en el
     * campo de texto de nombre.
     */
    private void txtNombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombreKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isLetter(c) && !Character.isWhitespace(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_txtNombreKeyTyped
    /**
     * Este método se ejecuta cuando se hace clic en el botón "Cancelar". Limpia
     * los campos de texto de RFC y nombre.
     *
     * @param evt El evento de acción generado por hacer clic en el botón
     * "Cancelar".
     */
    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        txtRFC.setText("");
        txtNombre.setText("");


    }//GEN-LAST:event_btnCancelarActionPerformed
    /**
     * Este método se ejecuta cuando se presiona una tecla en el campo de texto
     * de RFC. Verifica si la tecla presionada es una letra, un dígito o un
     * espacio en blanco, de lo contrario consume el evento para evitar la
     * entrada de caracteres inválidos.
     *
     * @param evt El evento de teclado generado por presionar una tecla en el
     * campo de texto de RFC.
     */
    private void txtRFCKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRFCKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isLetterOrDigit(c) || !Character.isLetterOrDigit(c) && !Character.isWhitespace(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_txtRFCKeyTyped
    /**
     * Configura un listener de eventos de mouse en la tabla jtConsultas para
     * detectar si se hace doble clic en una celda de la tabla. Cuando se
     * detecta un doble clic, se obtiene la fila y columna seleccionada, se
     * obtiene la información de la persona correspondiente a esa fila, se crea
     * una nueva instancia de la clase Historial con la persona y un objeto
     * TramiteDAO como parámetros, se muestra la ventana Historial, se muestra
     * un mensaje con el valor de la celda seleccionada y se cierra la ventana
     * actual.
     */
    public void acciontabla() {

        jtConsultas.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) { // si se hace doble clic
                    JTable target = (JTable) e.getSource();
                    int row = target.getSelectedRow();
                    int column = target.getSelectedColumn();

                    IConexionBD conexionbd = new ConexionBD();
                    ITramiteDAO tramite = new TramiteDAO(conexionbd);
                    Historial hs = new Historial(personas.get(row), tramite);
                    hs.setVisible(true);

                    JOptionPane.showMessageDialog(null, target.getValueAt(row, column));
                    ((Window) SwingUtilities.getRoot(target)).dispose();
                }

            }
        });

    }

    /**
     * Llena la tabla jtConsultas con los datos de personas obtenidos de una
     * base de datos. Aplica filtros de búsqueda por nombre y RFC. Los datos de
     * la tabla se obtienen de la lista de personas obtenidas de la base de
     * datos, se desencriptan los nombres y apellidos de las personas, se
     * aplican filtros de búsqueda por nombre, y se agregan los datos de las
     * personas filtradas a la tabla jtConsultas.
     */
    public void llenarTabla() {

        String rfc = txtRFC.getText();

        personas = personaDAO.personasSimilares2(rfc, txtFecha.getDate());

        DefaultTableModel modelo = (DefaultTableModel) jtConsultas.getModel();
        modelo.setRowCount(0); // Limpiar el contenido actual de la tabla

        for (Persona persona : personas) {
            persona.setNombre(EncriptacionUtils.desencriptarNombre(persona.getNombre()));
            persona.setApellidoPaterno(EncriptacionUtils.desencriptarApellidoPaterno(persona.getApellidoPaterno()));
            persona.setApellidoMaterno(EncriptacionUtils.desencriptarApellidoMaterno(persona.getApellidoMaterno()));
        }

        List<Persona> personass = new ArrayList<>();
        if (!txtNombre.getText().equals("")) {
            for (Persona persona : personas) {
                String nombreP = persona.getNombre();
                String apellidoPP = persona.getApellidoPaterno();
                String apellidoMP = persona.getApellidoMaterno();
                String nombreCompleto = nombreP + " " + apellidoPP + " " + apellidoMP;
                if (nombreCompleto.toLowerCase().contains(txtNombre.getText().toLowerCase())) {
                    personass.add(persona);
                }
            }
            personas = personass;
        }

        for (Persona persona : personas) {
            String nombre = persona.getNombre();

            String apellidoP = persona.getApellidoPaterno();

            String apellidoM = persona.getApellidoMaterno();
            rfc = persona.getRfc();

            String fechaNacimiento = persona.getFechaNacimiento().toString();
            modelo.addRow(new Object[]{nombre, apellidoP, apellidoM, rfc, fechaNacimiento});
        }

        // Actualizar la vista de la tabla
        jtConsultas.setModel(modelo);

    }

    /**
     * Elementos del frame
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAceptar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnVolver;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jtConsultas;
    private com.toedter.calendar.JDateChooser txtFecha;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtRFC;
    // End of variables declaration//GEN-END:variables
}
